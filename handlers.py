from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import uuid

from storage import read_data, write_data
from keyboards import user_menu, admin_mode_menu, admin_panel, help_navigator
from states import UserStates
from utils import is_admin

router = Router()

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """Handle the /start command, showing user or admin menu based on user role."""
    user_id = message.from_user.id
    if is_admin(user_id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=admin_mode_menu())
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏.", reply_markup=user_menu())

@router.message()
async def handle_text(message: types.Message, state: FSMContext):
    """Handle text messages, routing to appropriate actions based on user input."""
    user_id = message.from_user.id
    text = message.text

    if text == "–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and is_admin(user_id):
        await message.answer("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=user_menu())

    elif text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin(user_id):
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())

    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞" and is_admin(user_id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=admin_mode_menu())

    elif text == "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ–º–æ—â–∏":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=help_navigator())

    elif text == "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:\n1. –°—Ç—Ä–µ—Å—Å\n2. –î–µ–ø—Ä–µ—Å—Å–∏—è\n3. –ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥")
        await state.set_state(UserStates.HelpTopic)

    elif text == "–•–æ—á—É —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫—Ä–∞—Ç–∫–æ:")
        await state.set_state(UserStates.ReportProblem)

    elif text == "–ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?":
        contacts = (
            "üìû –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å (–¢–æ–º—Å–∫):\n"
            "- –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8-800-2000-122\n"
            "- –¶–µ–Ω—Ç—Ä –ø—Å–∏—Ö. –ø–æ–º–æ—â–∏: +7 (3822) 123-456\n\n"
            "üö® –ü—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã:\n"
            "- –ü–æ–ª–∏—Ü–∏—è –¢–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏: 102\n"
            "- –£–ú–í–î –¢–æ–º—Å–∫: +7 (3822) 789-000"
        )
        await message.answer(contacts, reply_markup=user_menu())

    elif text == "–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞":
        await message.answer(
            "üö® –ï—Å–ª–∏ –≤—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n1. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ 112\n2. –î—ã—à–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ: –≤–¥–æ—Ö 4 —Å–µ–∫, –≤—ã–¥–æ—Ö 4 —Å–µ–∫\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–µ–π: 8-800-2000-122",
            reply_markup=user_menu()
        )

    elif text == "–ê–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π":
        data = read_data()
        events = data.get('events', [])
        if events:
            response = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            for event in events:
                response += f"- {event['title']} ({event['date']}): {event['description']}\n"
        else:
            response = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        await message.answer(response, reply_markup=user_menu())

    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¶–ú–ü:")
        await state.set_state(UserStates.AskQuestion)

    elif text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" and is_admin(user_id):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (—Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ|–î–∞—Ç–∞|–û–ø–∏—Å–∞–Ω–∏–µ;–ù–∞–∑–≤–∞–Ω–∏–µ2|–î–∞—Ç–∞2|–û–ø–∏—Å–∞–Ω–∏–µ2 –∏–ª–∏ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|–î–∞—Ç–∞|–û–ø–∏—Å–∞–Ω–∏–µ):"
        )
        await state.set_state(UserStates.AddEvent)

    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã" and is_admin(user_id):
        data = read_data()
        questions = data.get('questions', [])
        if questions:
            response = "üìã –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for q in questions:
                response += f"ID: {q['id']}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {q['user_id']}, –í–æ–ø—Ä–æ—Å: {q['question']}, –°—Ç–∞—Ç—É—Å: {q['status']}\n"
        else:
            response = "–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç."
        await message.answer(response, reply_markup=admin_panel())

    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞" and is_admin(user_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456,789012):")
        await state.set_state(UserStates.AddAdmin)

    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=user_menu())
    elif text == "–ü–æ–º–æ—â—å –æ—Ç AI":
        await message.answer("", reply_markup=user_menu())

@router.message(UserStates.HelpTopic)
async def handle_help_topic(message: types.Message, state: FSMContext):
    """Handle user selection of help topics (stress, depression, cyberbullying)."""
    topic = message.text
    if topic == "1":
        await message.answer(
            "–°–æ–≤–µ—Ç –ø–æ —Å—Ç—Ä–µ—Å—Å—É: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å: 8-800-2000-122",
            reply_markup=user_menu()
        )
    elif topic == "2":
        await message.answer(
            "–ü—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –≤–∞–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º–∏. –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8-800-2000-122",
            reply_markup=user_menu()
        )
    elif topic == "3":
        await message.answer(
            "–ü—Ä–∏ –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–µ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª–∏—Ü–∏–∏: 102",
            reply_markup=user_menu()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.", reply_markup=user_menu())
    await state.clear()

@router.message(UserStates.ReportProblem)
async def handle_report(message: types.Message, state: FSMContext):
    """Handle user-submitted problem reports."""
    await message.answer(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–ª–∏—Ü–∏—é (102) –∏–ª–∏ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (8-800-2000-122).",
        reply_markup=user_menu()
    )
    await state.clear()

@router.message(UserStates.AskQuestion)
async def handle_question(message: types.Message, state: FSMContext):
    """Handle user-submitted questions for experts."""
    user_id = message.from_user.id
    question = message.text
    data = read_data()
    data.setdefault('questions', []).append({
        'id': str(uuid.uuid4()),
        'user_id': user_id,
        'question': question,
        'status': '–ù–æ–≤–æ–µ'
    })
    write_data(data)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–∞–º!", reply_markup=user_menu())
    await state.clear()

@router.message(UserStates.AddEvent)
async def handle_add_event(message: types.Message, state: FSMContext):
    """Handle admin addition of events to the system."""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await state.clear()
        return
    data = read_data()
    events_input = message.text.strip().split(';')
    added_count = 0
    error_messages = []

    for event_str in events_input:
        try:
            title, date, description = event_str.split('|')
            data.setdefault('events', []).append({
                'id': str(uuid.uuid4()),
                'title': title.strip(),
                'date': date.strip(),
                'description': description.strip()
            })
            added_count += 1
        except ValueError:
            error_messages.append(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {event_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|–î–∞—Ç–∞|–û–ø–∏—Å–∞–Ω–∏–µ")

    if added_count > 0:
        write_data(data)
        response = f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ(–π)!"
    else:
        response = "–ù–∏ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."

    if error_messages:
        response += "\n–û—à–∏–±–∫–∏:\n" + "\n".join(error_messages)

    await message.answer(response, reply_markup=admin_panel())
    await state.clear()

@router.message(UserStates.AddAdmin)
async def handle_add_admin(message: types.Message, state: FSMContext):
    """Handle admin addition of new admin Telegram IDs."""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await state.clear()
        return
    data = read_data()
    admin_ids_input = message.text.strip().split(',')
    added_count = 0
    error_messages = []
    existing_admins = []

    for admin_id in admin_ids_input:
        try:
            new_admin_id = int(admin_id.strip())
            if new_admin_id not in data.get('admins', []):
                data.setdefault('admins', []).append(new_admin_id)
                added_count += 1
            else:
                existing_admins.append(str(new_admin_id))
        except ValueError:
            error_messages.append(f"–û—à–∏–±–∫–∞: {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º Telegram ID.")

    if added_count > 0:
        write_data(data)
        response = f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä(–æ–≤)!"
    else:
        response = "–ù–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"